import { storage } from './storage';
import { generatePDF } from './index';

export interface CertificateData {
  recipientName: string;
  formTitle: string;
  score: number;
  maxScore: number;
  percentage: number;
  date: string;
  passed: boolean;
}

export const generateCertificate = async (
  formId: string, 
  responseId: string, 
  certificateData: CertificateData
): Promise<void> => {
  const certificate = storage.getCertificate(formId);
  const brandSettings = storage.getBrandSettings();
  
  // Create certificate HTML
  const element = document.createElement('div');
  element.style.width = '800px';
  element.style.height = '600px';
  element.style.padding = '40px';
  element.style.fontFamily = 'Arial, sans-serif';
  element.style.backgroundColor = 'white';
  element.style.position = 'relative';
  element.style.background = certificate?.template.backgroundImage 
    ? `url(${certificate.template.backgroundImage})` 
    : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
  element.style.backgroundSize = 'cover';
  element.style.backgroundPosition = 'center';

  // Add certificate content
  element.innerHTML = `
    <div style="text-align: center; height: 100%; display: flex; flex-direction: column; justify-content: center; color: white;">
      ${certificate?.template.logoImage ? `
        <img src="${certificate.template.logoImage}" alt="Logo" style="width: 80px; height: 80px; margin: 0 auto 20px; object-fit: contain;" />
      ` : ''}
      
      <h1 style="font-size: 48px; margin: 20px 0; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
        ${certificate?.template.layout.title.text || 'Certificate of Achievement'}
      </h1>
      
      <p style="font-size: 24px; margin: 20px 0; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
        This is to certify that
      </p>
      
      <h2 style="font-size: 36px; margin: 30px 0; font-weight: bold; color: #FFD700; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">
        ${certificateData.recipientName}
      </h2>
      
      <p style="font-size: 20px; margin: 20px 0; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
        has successfully completed
      </p>
      
      <h3 style="font-size: 28px; margin: 20px 0; font-weight: bold; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
        ${certificateData.formTitle}
      </h3>
      
      <div style="margin: 30px 0; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 10px; backdrop-filter: blur(10px);">
        <p style="font-size: 18px; margin: 5px 0;">Score: ${certificateData.score}/${certificateData.maxScore}</p>
        <p style="font-size: 18px; margin: 5px 0;">Percentage: ${certificateData.percentage}%</p>
        <p style="font-size: 18px; margin: 5px 0;">Date: ${certificateData.date}</p>
      </div>
      
      ${certificate?.template.signatureImage ? `
        <div style="position: absolute; bottom: 40px; right: 40px;">
          <img src="${certificate.template.signatureImage}" alt="Signature" style="width: 120px; height: 60px; object-fit: contain;" />
          <p style="font-size: 14px; margin-top: 5px; text-align: center;">Authorized Signature</p>
        </div>
      ` : ''}
      
      <div style="position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%); font-size: 12px; opacity: 0.8;">
        Generated by ${brandSettings.brandName} â€¢ ${new Date().toLocaleDateString()}
      </div>
    </div>
  `;

  // Add to DOM temporarily for PDF generation
  document.body.appendChild(element);
  
  try {
    await generatePDF(element, `${certificateData.formTitle}-${certificateData.recipientName}-certificate.pdf`);
  } finally {
    document.body.removeChild(element);
  }
};

export const shouldGenerateCertificate = (
  formId: string, 
  score: number, 
  maxScore: number
): boolean => {
  const form = storage.getForm(formId);
  if (!form || form.type !== 'quiz' || !form.certificateEnabled) {
    return false;
  }
  
  const percentage = (score / maxScore) * 100;
  const passingScore = form.passingScore || 60;
  
  return percentage >= passingScore;
};